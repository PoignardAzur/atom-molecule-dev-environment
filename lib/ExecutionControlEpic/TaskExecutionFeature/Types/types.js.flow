"use babel";
// @flow

import type { DevToolInfo } from "../../PlanConfigurationFeature/Types/types.js.flow";
import type { WatchFilesController } from "../../../EventSystemEpic/FileFeature/Types/types";
import type { TaskAPI } from "../../LanguageServerProtocolFeature/Types/pluginApi";
import type {
  DiagnosticError,
  DiagnosticHint,
  DiagnosticInformation, DiagnosticSuccess,
  DiagnosticWarning
} from "../../DiagnosticsFeature/Types/types";
import type { ProcessEnv } from "nuclide-prebuilt-libs/pty/lib/index.js.flow";

export type TaskState =
  | "created"
  | "running"
  | "stopped"
  | "crashed"
  | "succeed"
  | "failed"
  | null;

export type Task = {
  id: string,
  plan: {
    config: mixed,
    tool: DevToolInfo,
  },
  strategy: Strategy,
  state: TaskState,
  busy?: boolean,
  step: number,
  debut: number, // Date's timestamp
  end?: number, // Date's timestamp
  terminal: boolean,
};

export type Process = child_process$ChildProcess;

export type HelperAPI = {
  outputToHTML: (output: string) => string,
  json: {
    parseAsync: (json: string) => Promise<Object>,
  },
  fs: {
    getTmpPath: (fileName: string) => string,
  },
  severity: {
    error: DiagnosticError,
    warning: DiagnosticWarning,
    info: DiagnosticInformation,
    hint: DiagnosticHint,
    success: DiagnosticSuccess,
  },
};

export type Shell = string;

export type StrategyBase = {
  cwd?: string,
  env?: ProcessEnv,
}

export type NodeProcessStrategyType = StrategyBase & {
  type: "node",
  path: string,
  args?: Array<string>,
  lsp?: boolean,
};

export type ShellStrategyType = StrategyBase & {
  type: "shell",
  command: string,
  lsp?: boolean,
};

export type TerminalStrategyType = StrategyBase & {
  type: "terminal",
  command: string,
};

export type Strategy = ShellStrategyType | NodeProcessStrategyType | TerminalStrategyType;

export type Controller = {
  onData?: (err: string, taskAPI: TaskAPI, HelperApi: HelperAPI) => void,
  onExit?: (code: number, taskAPI: TaskAPI, HelperApi: HelperAPI) => void,
  onError?: (err: string, taskAPI: TaskAPI, HelperApi: HelperAPI) => void,
  watchFiles?: WatchFilesController,
};
