"use babel";
// @flow

import { Map } from "immutable";
import configureMockStore from "redux-mock-store";
import { createEpicMiddleware } from "redux-observable";
import { packagesRefreshed } from "../Actions/PackagesRefreshed";
import generatePlansEpic from "./GeneratePlans";

import { removeGeneratedPlans } from "../../../ExecutionControlEpic/PlanConfigurationFeature/Actions/RemoveGeneratedPlans";

jest.useFakeTimers();

describe("GeneratePlans Epic", () => {
  let store;

  const fakePluginInfo = {
    tool: {
      id: "1",
      name: "toolName",
      iconUri: "toolIcon",
      uri: "file:///file",
    },
    isPackage: "package.json",
  };
  const fakePackageInfo = {
    name: "package.json",
    path: "/firstDir/package.json",
    uriPlatform: "posix",
    type: "file",
  };
  const fakeConfig = {
    name: "test1",
    value: {
      caseValue: { script: "script1", environmentVariables: [] },
      expressionValue: "run",
    },
  };
  beforeEach(() => {
    const epicGeneratePlans = createEpicMiddleware(generatePlansEpic);
    const mockStore = configureMockStore([epicGeneratePlans]);
    store = mockStore({
      plans: Map(),
    });
  });

  it("should do nothing without generatePlansForPackage", () => {
    const fakePackage = { ...fakePackageInfo, plugin: fakePluginInfo };
    const packagesAction = packagesRefreshed(
      "/",
      [fakePackage],
      [fakePluginInfo],
    );

    store.dispatch(packagesAction);
    jest.runAllTimers();

    expect(store.getActions()).toEqual([packagesAction]);
  });

  it("should dispatch a addPlanConfig", () => {
    const fakePlugin = {
      ...fakePluginInfo,
      generatePlansForPackage: packageName => [fakeConfig],
    };
    const fakePackage = { ...fakePackageInfo, plugin: fakePlugin };
    const packagesAction = packagesRefreshed("/", [fakePackage], [fakePlugin]);

    store.dispatch(packagesAction);
    jest.runAllTimers();

    expect(store.getActions()).toEqual([
      packagesAction,
      removeGeneratedPlans(fakePluginInfo.tool),
      {
        type: "ADD_PLAN_CONFIGURATION",
        payload: {
          id: "0",
          name: "test1",
          tool: fakePlugin.tool,
          autoGenerated: true,
          config: fakeConfig.value,
          packageInfo: fakePackage,
          pinned: false,
        },
      },
    ]);
  });
});
